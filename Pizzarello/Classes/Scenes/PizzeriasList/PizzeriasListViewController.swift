//
//  PizzeriasListViewController.swift
//  Pizzarello
//
//  Created by Oleksandr Nechet on 23.07.17.
//  Copyright (c) 2017 Oleksandr Nechet. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PizzeriasListDisplayLogic: class
{
    func displayErrorMessage(errorMessage: String)
    func displayFetchedPizzerias(viewModel: PizzeriasList.FetchPizzerias.ViewModel)
    func allPizzeriasDidReceived()
}

class PizzeriasListViewController: UITableViewController, PizzeriasListDisplayLogic
{
    struct SegueIdentieirs
    {
        private init() {}
        
        internal static let showPizzeriaDetails = "ShowPizzeriaDetails"
    }
    
    var interactor: PizzeriasListBusinessLogic?
    var router: (NSObjectProtocol & PizzeriasListRoutingLogic)?
    var displayedPizzerias: [PizzeriasList.FetchPizzerias.ViewModel.DisplayedPizzerias] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PizzeriasListInteractor()
        let presenter = PizzeriasListPresenter()
        let router = PizzeriasListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue,
                          sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        registerTableViewComponents()
        configureSpinnerFooterView()
        fetchPizzeriasOnLoad()
    }

    //MARK: - UITableViewDataSource
    override func tableView(_ tableView: UITableView,
                            numberOfRowsInSection section: Int) -> Int
    {
        return displayedPizzerias.count
    }
    
    override func tableView(_ tableView: UITableView,
                            cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let displayedPizzeria = displayedPizzerias[indexPath.row]
        let cell: PizzeriasListCell = tableView.dequeueReusableCell(for: indexPath)
        cell.setPizzeriaInfo(displayedPizzeria)
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView,
                            willDisplay cell: UITableViewCell,
                            forRowAt indexPath: IndexPath)
    {
        let isLastRow: Bool = (indexPath.row == (displayedPizzerias.endIndex - 1))
        
        if isLastRow {
            interactor?.requestNextChunkPizzerias()
        }
    }
    
    //MARK: - UITableViewDelegate
    
    override func tableView(_ tableView: UITableView,
                            didSelectRowAt indexPath: IndexPath)
    {
        performSegue(withIdentifier: SegueIdentieirs.showPizzeriaDetails,
                     sender: nil)
    }
    
    //MARK: - ContactsListDisplayLogic
    
    func displayFetchedPizzerias(viewModel: PizzeriasList.FetchPizzerias.ViewModel)
    {
        displayedPizzerias = viewModel.displayedPizzerias
        tableView.reloadData()
    }
    
    func allPizzeriasDidReceived()
    {
        tableView.tableFooterView = nil
    }
    
    //MARK: - Helpers
    private func registerTableViewComponents()
    {
        tableView.registerReusableCell(PizzeriasListCell.self)
    }
    
    private func configureSpinnerFooterView()
    {
        tableView.tableFooterView = Bundle.main.loadNibNamed("PizzeriaListSpinnerFooterView",
                                                             owner: nil,
                                                             options: nil)?.first! as? UIView
    }
    
    private func fetchPizzeriasOnLoad()
    {
        interactor?.fetchPizzeriasOnLoad()
    }
}
